GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = Clean_DataSP500$Vol) # Standard GARCH(1, 1) spec and fit
iGARCHspec <- ugarchspec(variance.model = list(model = 'iGARCH', garchOrder = c(1, 1)), distribution.model = 'norm')
iGARCHfit <- ugarchfit(iGARCHspec, data = Clean_DataSP500$Vol) # Integrated GARCH(1, 1) spec and fit
eGARCHspec <- ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)), distribution.model = 'norm')
eGARCHfit <- ugarchfit(eGARCHspec, data = Clean_DataSP500$Vol) # Exponential GARCH(1, 1) spec and fit
gjrGARCHspec <- ugarchspec(variance.model = list(model = 'gjrGARCH', garchOrder = c(1, 1)), distribution.model = 'norm')
gjrGARCHfit <- ugarchfit(gjrGARCHspec, data = Clean_DataSP500$Vol) # GJR GARCH(1, 1) spec and fit
tGARCHspec <- ugarchspec(variance.model = list(model = 'tGARCH', garchOrder = c(1, 1)), distribution.model = 'norm')
tGARCHfit <- ugarchfit(tGARCHspec, data = Clean_DataSP500$Vol) # Threshold GARCH(1, 1) spec and fit
View(tGARCHspec)
setwd('/Users/lucasA/Desktop')
data <- readexcel('brent1.xlsx')
library(readxl)
data <- readexcel('brent1.xlsx')
data <- read_excel('brent1.xlsx')
library(zoo)
data <- zoo(read_excel('brent1.xlsx'))
FintS.stats(data)
basicStats(data)
library(diveRsity)
library(basicStats)
install.packages("basicStats")
library(fBasics)
FintS.stats(data)
basicStats(data)
library(finTS)
library(FinTS)
install.packages("FinTS")
library(FinTS)
FintS.stats(data)
data = ts(data)
sumary(data)
summary(data)
FinTS.stats(data)
library(PerformanceAnalytics)
SemiDeviation(data)
ggplot(data = data)+
geiom_line()
library(ggplot2)
ggplot(data = data)+
geiom_line()
JarquesBeraTest(data)
library(DescTools)
install.packages("DescTools")
library(DescTools)
JarquesBeraTest(data)
JarqueBeraTest(data)
Box.test(data, lag = 10, type = c(Ljung-Box), fitdif = 0)
Box.test(data, lag = 10, type = c(Ljung-Box))
Box.test(data, lag = 10, type = c('Ljung-Box'))
Box.test(data^2, lag = 10, type = c('Ljung-Box'))
ArchTest(base^2,lag = 10)
ArchTest(data^2,lag = 10)
par(mfrow(2, 2))
par(mfrow= c(2, 2))
acf(data)
pacf(data)
acf(data^2)
pacf(data^2)
acf(data, main = 'acf data')
pacf(data)
acf(data^2)
pacf(data^2)
par(mfrow= c(2, 2))
acf(data, main = 'acf data')
pacf(data)
acf(data^2)
pacf(data^2)
hist(data, color = 'navyblue')
xfit <- seq(min(base3), max(base3), length = 40)
yfit <- dnorm(xfit, mean = mean(base3), sd = sd(base3))
yfit <- yfit * diff(h$mids[1:2]) * length(base3)
lines(xfit, yfit, col = "red", lwd = 2)
hist(data, color = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
h <- hist(data, color = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
h <- hist(data, color = 'navyblue')
h <- hist(data, color = 'lightblue')
h <- hist(data, col = 'lightblue')
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(robustbase)
data <- Return.Clean(data)
data <- Return.clean(data)
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
data <- Return.clean(data, method = 'boudt')
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
library(rygarch)
library(rugarch)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = (list(armaorder = c(0,0)))garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = (list(armaorder = c(0,0))), garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = list(armaorder = c(0,0)), garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = list(armaorder = c(0,0)), garchOrder = c(1, 1)), distribution.model = 'norm', include.mean = TRUE)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = list(armaOrder = c(0,0)), garchOrder = c(1, 1)), distribution.model = 'norm', include.mean = TRUE)
GARCHfit <- ugarchfit(GARCHspec, data = Clean_DataSP500$Vol) # Standard GARCH(1, 1)
GARCHfit <- ugarchfit(GARCHspec, data = dara) # Standard GARCH(1, 1)
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
GARCHfit <- ugarchfit(GARCHspec, data = data^2) # Standard GARCH(1, 1)
GARCHfit
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = list(armaOrder = c(0,0)), garchOrder = c(1, 1)), distribution.model = 'norm', include.mean = TRUE)
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH'), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), garchOrder = c(1, 1)), distribution.model = 'norm')
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH'), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
GARCHspec <- ugarchspec(variance.model = list(model = "sGARCH"), mean.model = list(armaOrder = c(0, 0), include.mean=TRUE))
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
persistence(GARCHfit)
halflife(GACRHfit)
halflife(GARCHfit)
estim <- 500
h <- 100
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
yy <- y[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
# Writing the results to output file, change the output file name
write(t(statmat),file="forecast_sGARCH.txt",ncolumn=1,append=FALSE)
estim <- 500
h <- 100
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
# Writing the results to output file, change the output file name
write(t(statmat),file="forecast_sGARCH.txt",ncolumn=1,append=FALSE)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05 * sigma(forc))
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
write(t(foremat),file="Risk_forecast.txt",ncolumn=1,append=FALSE)
write(t(foremat),file="VaR.txt",ncolumn=1,append=FALSE)
write(t(esmat),file="Exp_Short.txt",ncolumn=1,append=FALSE)
foremat <- matrix(nrow = h, ncol = 1)
varmat <- matrix(nrow = h, ncol = 1)
esmat <- matrix(nrow = h, ncol = 1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05 * sigma(forc))
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05) * sigma(forc)
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
library(GAS)
install.packages("GAS")
library(GAS)
backtest <- BacktestVaR(data = test, VaR = var, alpha = alpha)
alpha = 0.05
testdata <- data[c(1001 : 1260), ]
test <- ts(testdata)
var <- ts(varmat)
backtest <- BacktestVaR(data = test, VaR = var, alpha = alpha)
kupiec <- nacktest$LRcc
estim <- 1000 #nb jours 2015 - 2018
h <- 260 #nb jours 2019
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
# Writing the results to output file, change the output file name
write(t(statmat),file="forecast_sGARCH.txt",ncolumn=1,append=FALSE)
foremat <- matrix(nrow = h, ncol = 1)
varmat <- matrix(nrow = h, ncol = 1)
esmat <- matrix(nrow = h, ncol = 1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05) * sigma(forc)
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
write(t(foremat),file="Risk_forecast.txt",ncolumn=1,append=FALSE)
write(t(foremat),file="VaR.txt",ncolumn=1,append=FALSE)
write(t(esmat),file="Exp_Short.txt",ncolumn=1,append=FALSE)
alpha = 0.05
testdata <- data[c(1001 : 1260), ]
test <- ts(testdata)
var <- ts(varmat)
backtest <- BacktestVaR(data = test, VaR = var, alpha = alpha)
show(backtest$LRcc)
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(readxl)
library(zoo)
library(fBasics)
library(FinTS)
library(PerformanceAnalytics)
library(ggplot2)
library(DescTools)
library(robustbase)
library(rugarch)
library(GAS)
data <- zoo(read_excel('brent1.xlsx'))
FinTS.stats(data)
basicStats(data)
data = ts(data)
summary(data)
SemiDeviation(data)
JarqueBeraTest(data)
Box.test(data, lag = 10, type = c('Ljung-Box'))
Box.test(data^2, lag = 10, type = c('Ljung-Box'))
ArchTest(data^2,lag = 10)
par(mfrow= c(2, 2))
acf(data, main = 'acf data')
pacf(data)
acf(data^2)
pacf(data^2)
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
data <- Return.clean(data, method = 'boudt')
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH'), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
persistence(GARCHfit)
halflife(GARCHfit)
estim <- 1000 #nb jours 2015 - 2018
h <- 260 #nb jours 2019
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
# Writing the results to output file, change the output file name
write(t(statmat),file="forecast_sGARCH.txt",ncolumn=1,append=FALSE)
foremat <- matrix(nrow = h, ncol = 1)
varmat <- matrix(nrow = h, ncol = 1)
esmat <- matrix(nrow = h, ncol = 1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05) * sigma(forc)
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
write(t(foremat),file="Risk_forecast.txt",ncolumn=1,append=FALSE)
write(t(foremat),file="VaR.txt",ncolumn=1,append=FALSE)
write(t(esmat),file="Exp_Short.txt",ncolumn=1,append=FALSE)
alpha = 0.05
testdata <- data[c(1001 : 1260), ]
test <- ts(testdata)
var <- ts(varmat)
backtest <- BacktestVaR(data = test, VaR = var, alpha = alpha)
show(backtest$LRcc)
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(readxl)
library(zoo)
library(fBasics)
library(FinTS)
library(PerformanceAnalytics)
library(ggplot2)
library(DescTools)
library(robustbase)
library(rugarch)
library(GAS)
data <- zoo(read_excel('brent1.xlsx'))
FinTS.stats(data)
basicStats(data)
JarqueBeraTest(data)
Box.test(data, lag = 10, type = c('Ljung-Box'))
Box.test(data^2, lag = 10, type = c('Ljung-Box'))
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(readxl)
library(zoo)
library(fBasics)
library(FinTS)
library(PerformanceAnalytics)
library(ggplot2)
library(DescTools)
library(robustbase)
library(rugarch)
library(GAS)
data <- zoo(read_excel('brent1.xlsx'))
FinTS.stats(data)
basicStats(data)
data = ts(data)
summary(data)
SemiDeviation(data)
JarqueBeraTest(data)
Box.test(data, lag = 10, type = c('Ljung-Box'))
Box.test(data^2, lag = 10, type = c('Ljung-Box'))
ArchTest(data^2,lag = 10)
par(mfrow= c(2, 2))
acf(data, main = 'acf data')
pacf(data)
acf(data^2)
pacf(data^2)
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
data <- Return.clean(data, method = 'boudt')
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH'), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
persistence(GARCHfit)
halflife(GARCHfit)
estim <- 1000 #nb jours 2015 - 2018
h <- 260 #nb jours 2019
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
foremat
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(readxl)
library(zoo)
library(fBasics)
library(FinTS)
library(PerformanceAnalytics)
library(ggplot2)
library(DescTools)
library(robustbase)
library(rugarch)
library(GAS)
data <- zoo(read_excel('brent1.xlsx'))
FinTS.stats(data)
basicStats(data)
data = ts(data)
summary(data)
SemiDeviation(data)
JarqueBeraTest(data)
Box.test(data, lag = 10, type = c('Ljung-Box'))
Box.test(data^2, lag = 10, type = c('Ljung-Box'))
ArchTest(data^2,lag = 10)
par(mfrow= c(2, 2))
acf(data, main = 'acf data')
pacf(data)
acf(data^2)
pacf(data^2)
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
data <- Return.clean(data, method = 'boudt')
h <- hist(data, col = 'navyblue')
xfit <- seq(min(data), max(data), length = 40)
yfit <- dnorm(xfit, mean = mean(data), sd = sd(data))
yfit <- yfit * diff(h$mids[1:2]) * length(data)
lines(xfit, yfit, col = "red", lwd = 2)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH'), mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = data) # Standard GARCH(1, 1)
GARCHfit
persistence(GARCHfit)
halflife(GARCHfit)
estim <- 1000 #nb jours 2015 - 2018
h <- 260 #nb jours 2019
statmat <- matrix(nrow=h, ncol=1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
# statmat[i,1] <- rbind(sigma(forc))
}
statmat
# Writing the results to output file, change the output file name
write(t(statmat),file="forecast_sGARCH.txt",ncolumn=1,append=FALSE)
foremat <- matrix(nrow = h, ncol = 1)
varmat <- matrix(nrow = h, ncol = 1)
esmat <- matrix(nrow = h, ncol = 1)
for(i in 1:h){
data2 <- data[1:(estim-1+i),1]
GARCHfit = ugarchfit(data = data2, spec = GARCHspec)
forc =  ugarchforecast(GARCHfit, n.ahead=1)
statmat[i,1] <- sigma(forc)^2
varmat[i, 1] <- qnorm(0.05) * sigma(forc)
esmat[i, 1] <- - dnorm(qnorm(0.05)/0.05) * sigma(forc)
# statmat[i,1] <- rbind(sigma(forc))
}
foremat
varmat
mean(varmat)
esmat
mean(esmat)
write(t(foremat),file="Risk_forecast.txt",ncolumn=1,append=FALSE)
write(t(foremat),file="VaR.txt",ncolumn=1,append=FALSE)
write(t(esmat),file="Exp_Short.txt",ncolumn=1,append=FALSE)
alpha = 0.05
testdata <- data[c(1001 : 1260), ]
test <- ts(testdata)
var <- ts(varmat)
backtest <- BacktestVaR(data = test, VaR = var, alpha = alpha)
show(backtest$LRcc)
setwd('/Users/lucasA/Desktop/Econométrie Financière/Econometrie-Financiere/TD')
library(readxl)
library(zoo)
library(fBasics)
library(FinTS)
library(PerformanceAnalytics)
library(ggplot2)
library(DescTools)
library(robustbase)
library(rugarch)
library(GAS)
data <- zoo(read_excel('brent1.xlsx'))
data <- Return.clean(data, method = 'boudt')
show(data)
data <- Return.clean(data, method = 'boudt')

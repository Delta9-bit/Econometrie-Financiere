#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
#2) dÃ©tection des outliers
baseWTI$clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
baseWTI$clean.Dernier <- tso(baseWTI$Dernier)
baseWTI$clean.Dernier <- tso(c(baseWTI$Dernier))
par(mfrow=c(2,2))
acf(baseWTI$rtWTI, main="Return ACF")
pacf(baseWTI$clean.rtWTI, main="Return PACF")
acf(baseWTI$rtWTI^2, main="Squared return ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared return PACF")
sumary(baseWTI$clean.rtWTI)
summary(baseWTI$clean.rtWTI)
sum(is.na(baseWTI$clean.rtWTI))
is.na(baseWTI$clean.rtWTI)
pacf(baseWTI$clean.rtWTI, main="Return PACF")
acf(baseWTI$rtWTI^2, main="Squared return ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared return PACF")
is.na(clean.rtWTI)
sum(is.na(baseWTI$clean.rtWTI))
library(rugarch)
library(readxl)
library(ggplot2)
library(PerformanceAnalytics)
library(robustbase)
library(tidyverse)
library(GAS)
library(DescTools)
library(FinTS)
library(zoo)
library(fBasics)
library(readxl)
library(tsoutliers)
library(Hmisc)
library(rugarch)
library(quantmod)
#L'Ã©tude porte sur le cours du WTI du 1/01/2015 au 31/12/2019
baseWTI=read_csv(file.choose(),col_names=T)
View(baseWTI)
str(baseWTI)
##on garde juste la colonne date close et adj close
baseWTI=baseWTI[,c(1,2,3)]
#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
#2) dÃ©tection des outliers
baseWTI$clean.rtWTI <- as.ts(Return.clean(baseWTI$rtWTI,method = "boudt"))
#3)Graphique sÃ©rie brute et corrigÃ©e pour rentabilitÃ©s
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI), size = 0.1, color = "#00AFBB") +
theme_minimal()
#Pour rentabilitÃ©s au carrÃ©
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI^2), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI^2), size = 0.1, color = "#00AFBB") +
theme_minimal()
#4) Graphique des corrÃ©lations des rentabilitÃ©s et des rentabilitÃ©s au carrÃ© sur sÃ©rie corrigÃ©e
par(mfrow=c(2,2))
acf(baseWTI$rtWTI, main="Return ACF")
pacf(baseWTI$clean.rtWTI, main="Return PACF")
acf(baseWTI$rtWTI^2, main="Squared return ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared return PACF")
library(rugarch)
library(readxl)
library(ggplot2)
library(PerformanceAnalytics)
library(robustbase)
library(tidyverse)
library(GAS)
library(DescTools)
library(FinTS)
library(zoo)
library(fBasics)
library(readxl)
library(tsoutliers)
library(Hmisc)
library(rugarch)
library(quantmod)
#L'Ã©tude porte sur le cours du WTI du 1/01/2015 au 31/12/2019
baseWTI=read_csv(file.choose(),col_names=T)
View(baseWTI)
str(baseWTI)
##on garde juste la colonne date close et adj close
baseWTI=baseWTI[,c(1,2,3)]
#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
#2) dÃ©tection des outliers
baseWTI$clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
#3)Graphique sÃ©rie brute et corrigÃ©e pour rentabilitÃ©s
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI), size = 0.1, color = "#00AFBB") +
theme_minimal()
#Pour rentabilitÃ©s au carrÃ©
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI^2), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI^2), size = 0.1, color = "#00AFBB") +
theme_minimal()
#4) Graphique des corrÃ©lations des rentabilitÃ©s et des rentabilitÃ©s au carrÃ© sur sÃ©rie corrigÃ©e
par(mfrow=c(2,2))
acf(baseWTI$rtWTI, main="Return ACF")
pacf(baseWTI$clean.rtWTI, main="Return PACF")
acf(baseWTI$rtWTI^2, main="Squared return ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared return PACF")
acf(baseWTI$clean.rtWTI, main="Return ACF")
pacf(baseWTI$clean.rtWTI, main="Return PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared return ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared return PACF")
str(baseWTI$clean.rtWTI)
Return.clean(baseWTI$rtWTI,method = "boudt")
str(baseWTI$rtWTI)
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
baseWTI$clean.rtWTI <- clean.rtWTI
acf(baseWTI$clean.rtWTI, main="Returns ACF")
pacf(baseWTI$clean.rtWTI, main="Returns PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared returns ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared returns PACF")
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")[2]
clean.rtWTI
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")[, 2]
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
baseWTI$clean.rtWTI <- as.numeric(clean.rtWTI)
str(baseWTI$clean.rtWTI)
acf(baseWTI$clean.rtWTI, main="Returns ACF")
pacf(baseWTI$clean.rtWTI, main="Returns PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared returns ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared returns PACF")
par(mfrow = c(2, 2))
acf(baseWTI$clean.rtWTI, main="Returns ACF")
pacf(baseWTI$clean.rtWTI, main="Returns PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared returns ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared returns PACF")
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
h<-hist(baseWTI$rtWTI, main = "Distribution",  col="light blue", border="blue", xlab="Returns of Brent")
xfit <- seq(min(baseWTI$rtWTI), max(baseWTI$rtWTI), length = 40)
yfit <- dnorm(xfit, mean = mean(baseWTI$rtWTI), sd = sd(baseWTI$rtWTI))
yfit <- yfit * diff(h$mids[1:2]) * length(baseWTI$rtWTI)
lines(xfit, yfit, col = "red", lwd = 2)
sd = sd(baseWTI$clean.rtWTI)
mean = mean(baseWTI$clean.rtWTI)
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), fill = 'steelblue')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), color = '00AFBB')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), color = '#00AFBB')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = baseWTI$clean.rtWTI) # Standard GARCH(1, 1) spec and fit
View(GARCHfit)
GARCHfit@fit[["persistence"]]
GARCHfit@fit[["coef"]][["mu"]]
GARCHfit@fit[["tval"]][["mu"]]
GARCHfit@fit[["tval"]][["omega"]]
GARCHfit@fit[["coef"]][["mu"]]
GARCHfit@fit[["tval"]][["alpha1"]]
persistence(GARCHfit)
View(GARCHfit)
halflife(GARCHfit)
GARCHfit@fit[["LLH"]]
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = baseWTI$clean.rtWTI) # Standard GARCH(1, 1) spec and fit
GARCHfit
halflife(GARCHfit)
iGARCHspec <- ugarchspec(variance.model = list(model = 'iGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
iGARCHfit <- ugarchfit(iGARCHspec, data = baseWTI$clean.rtWTI) # Integrated GARCH(1, 1) spec and fit
iGARCHfit
halflife(iGARCHfit)
eGARCHspec <- ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
eGARCHfit <- ugarchfit(eGARCHspec, data = baseWTI$clean.rtWTI) # Exponential GARCH(1, 1) spec and fit
eGARCHfit
halflife(eGARCHfit)
gjrGARCHspec <- ugarchspec(variance.model = list(model = 'gjrGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
gjrGARCHfit <- ugarchfit(gjrGARCHspec, data = baseWTI$clean.rtWTI) # GJR GARCH(1, 1) spec and fit
gjrGARCHfit
halflife(gjrGARCHfit)
RISMspec = ugarchspec(variance.model=list(model = "iGARCH"),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE), distribution.model = 'norm',
fixed.pars=list(omega=0,alpha1=0.06,beta1=0.94))
RISMfit = ugarchfit(data = baseWTI$clean.rtWTI, spec = spec) # RiskMetrics
RISMfit
halflife(RISMfit)
RISMspec = ugarchspec(variance.model=list(model = "iGARCH"),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE), distribution.model = 'norm',
fixed.pars=list(omega=0,alpha1=0.06,beta1=0.94))
RISMfit = ugarchfit(data = baseWTI$clean.rtWTI, spec = RISMspec) # RiskMetrics
RISMfit
halflife(RISMfit)
persistence(eGARCHfit)
persistence(gjrGARCHfit)
library(rugarch)
library(readxl)
library(ggplot2)
library(PerformanceAnalytics)
library(robustbase)
library(tidyverse)
library(GAS)
library(DescTools)
library(FinTS)
library(zoo)
library(fBasics)
library(readxl)
library(tsoutliers)
library(Hmisc)
library(rugarch)
library(quantmod)
library(DescTools)
#L'Ã©tude porte sur le cours du WTI du 1/01/2015 au 31/12/2019
baseWTI=read_csv(file.choose(),col_names=T)
View(baseWTI)
str(baseWTI)
##on garde juste la colonne date close et adj close
baseWTI=baseWTI[,c(1,2,3)]
#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
#2) dÃ©tection des outliers
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
baseWTI$clean.rtWTI <- as.numeric(clean.rtWTI)
#3)Graphique sÃ©rie brute et corrigÃ©e pour rentabilitÃ©s
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI), size = 0.1, color = "#00AFBB") +
theme_minimal()
#Pour rentabilitÃ©s au carrÃ©
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI^2), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI^2), size = 0.1, color = "#00AFBB") +
theme_minimal()
#4) Graphique des corrÃ©lations des rentabilitÃ©s et des rentabilitÃ©s au carrÃ© sur sÃ©rie corrigÃ©e
par(mfrow = c(2, 2))
acf(baseWTI$clean.rtWTI, main="Returns ACF")
pacf(baseWTI$clean.rtWTI, main="Returns PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared returns ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared returns PACF")
rcorr(baseWTI$rtWTI,baseWTI$rtWTI^2)
#5) 6) Stats descriptives sur sÃ©rie corrigÃ©e et analyse de la distribution
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
sdev = SemiDeviation(baseWTI$rtWTI)
show(sdev)
sdev = SemiDeviation(baseWTI$rtWTI*100)
show(sdev)
# Jarque-Bera normality test with DescTools package
JBtest = JarqueBeraTest(rtWTI.ts, robust = FALSE, method = "chisq")
show(JBtest)
# Autocorrelation Returns
autocorrTest = Box.test(baseWTI$rtWTI, lag = 10, type = "Ljung-Box", fitdf = 0)
show(autocorrTest)
#heteroscedasticitÃ© conditionnelle
condheteroTest = Box.test(baseWTI$rtWTI^2, lag = 10, type = "Ljung-Box", fitdf = 0)
show(condheteroTest)
# Histogramme des rentabilitÃ©s
sd = sd(baseWTI$clean.rtWTI)
mean = mean(baseWTI$clean.rtWTI)
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), color = '00AFBB')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), color = '#00AFBB')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
GARCHspec_st <- ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'std')
GARCHfit_st <- ugarchfit(GARCHspec_st, data = baseWTI$clean.rtWTI) # Standard GARCH(1, 1) spec and fit
GARCHfit_st
halflife(GARCHfit_st)
baseWTI_forecast <- baseWTI[1:264, ]
#♦Année 2019
baseWTI <- baseWTI[265:1318, ]
library(rugarch)
library(readxl)
library(ggplot2)
library(PerformanceAnalytics)
library(robustbase)
library(tidyverse)
library(GAS)
library(DescTools)
library(FinTS)
library(zoo)
library(fBasics)
library(readxl)
library(tsoutliers)
library(Hmisc)
library(rugarch)
library(quantmod)
library(DescTools)
#L'Ã©tude porte sur le cours du WTI du 1/01/2015 au 31/12/2019
baseWTI=read_csv(file.choose(),col_names=T)
View(baseWTI)
str(baseWTI)
##on garde juste la colonne date close et adj close
baseWTI=baseWTI[,c(1,2,3)]
#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
#2) dÃ©tection des outliers
clean.rtWTI <- Return.clean(baseWTI$rtWTI,method = "boudt")
baseWTI$clean.rtWTI <- as.numeric(clean.rtWTI)
#3)Graphique sÃ©rie brute et corrigÃ©e pour rentabilitÃ©s
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI), size = 0.1, color = "#00AFBB") +
theme_minimal()
#Pour rentabilitÃ©s au carrÃ©
ggplot(data = baseWTI)+
geom_line(aes(x = Date, y = rtWTI^2), size = 0.1, color = 'red') +
geom_line(aes(x = Date, y = clean.rtWTI^2), size = 0.1, color = "#00AFBB") +
theme_minimal()
#4) Graphique des corrÃ©lations des rentabilitÃ©s et des rentabilitÃ©s au carrÃ© sur sÃ©rie corrigÃ©e
par(mfrow = c(2, 2))
acf(baseWTI$clean.rtWTI, main="Returns ACF")
pacf(baseWTI$clean.rtWTI, main="Returns PACF")
acf(baseWTI$clean.rtWTI^2, main="Squared returns ACF")
pacf(baseWTI$clean.rtWTI^2, main="Squared returns PACF")
rcorr(baseWTI$rtWTI,baseWTI$rtWTI^2)
#5) 6) Stats descriptives sur sÃ©rie corrigÃ©e et analyse de la distribution
statWTI=data.frame(basicStats(rtWTI*100))
statWTI
sdev = SemiDeviation(baseWTI$rtWTI)
show(sdev)
sdev = SemiDeviation(baseWTI$rtWTI*100)
show(sdev)
# Jarque-Bera normality test with DescTools package
JBtest = JarqueBeraTest(rtWTI.ts, robust = FALSE, method = "chisq")
show(JBtest)
# Autocorrelation Returns
autocorrTest = Box.test(baseWTI$rtWTI, lag = 10, type = "Ljung-Box", fitdf = 0)
show(autocorrTest)
#heteroscedasticitÃ© conditionnelle
condheteroTest = Box.test(baseWTI$rtWTI^2, lag = 10, type = "Ljung-Box", fitdf = 0)
show(condheteroTest)
# Histogramme des rentabilitÃ©s
sd = sd(baseWTI$clean.rtWTI)
mean = mean(baseWTI$clean.rtWTI)
ggplot(data = baseWTI)+
geom_density(aes(x = clean.rtWTI), color = '#00AFBB')+
stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = 'red')+
theme_minimal()
########ESTIMATION VOLATILITE
# Année 2015-218
baseWTI_forecast <- baseWTI[1:264, ]
#♦Année 2019
baseWTI <- baseWTI[265:1318, ]
View(baseWTI)
View(baseWTI_forecast)
GARCHspec <- ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
GARCHfit <- ugarchfit(GARCHspec, data = baseWTI$clean.rtWTI) # Standard GARCH(1, 1) spec and fit
GARCHfit
halflife(GARCHfit)
iGARCHspec <- ugarchspec(variance.model = list(model = 'iGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
iGARCHfit <- ugarchfit(iGARCHspec, data = baseWTI$clean.rtWTI) # Integrated GARCH(1, 1) spec and fit
iGARCHfit
halflife(iGARCHfit)
eGARCHspec <- ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
eGARCHfit <- ugarchfit(eGARCHspec, data = baseWTI$clean.rtWTI) # Exponential GARCH(1, 1) spec and fit
eGARCHfit
halflife(eGARCHfit)
persistence(eGARCHfit)
gjrGARCHspec <- ugarchspec(variance.model = list(model = 'gjrGARCH', garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE), distribution.model = 'norm')
gjrGARCHfit <- ugarchfit(gjrGARCHspec, data = baseWTI$clean.rtWTI) # GJR GARCH(1, 1) spec and fit
gjrGARCHfit
halflife(gjrGARCHfit)
persistence(gjrGARCHfit)
RISMspec = ugarchspec(variance.model=list(model = "iGARCH"),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE), distribution.model = 'norm',
fixed.pars=list(omega=0,alpha1=0.06,beta1=0.94))
RISMfit = ugarchfit(data = baseWTI$clean.rtWTI, spec = RISMspec) # RiskMetrics
RISMfit
halflife(RISMfit)
library(rugarch)
library(readxl)
library(ggplot2)
library(PerformanceAnalytics)
library(robustbase)
library(tidyverse)
library(GAS)
library(DescTools)
library(FinTS)
library(zoo)
library(fBasics)
library(readxl)
library(tsoutliers)
library(Hmisc)
library(rugarch)
library(quantmod)
library(DescTools)
library(multDM)
library(MCS)
#L'Ã©tude porte sur le cours du WTI du 1/01/2015 au 31/12/2019
baseWTI=read_csv(file.choose(),col_names=T)
View(baseWTI)
str(baseWTI)
##on garde juste la colonne date close et adj close
baseWTI=baseWTI[,c(1,2,3)]
#on recode les variables
baseWTI$Date <- as.Date(baseWTI$Date, format = '%d/%m/%Y') # Changing The Date Column to Date format
baseWTI <- baseWTI[order(baseWTI$Date), ]
##Evolution des prix
ggplot(data = baseWTI, aes(x = Date, y = Dernier)) +
geom_line(color = "#00AFBB", size = 1)+
theme_minimal()
##on va travailler sur les rentabilitÃ©s
rtWTI <- as.ts(diff(log(baseWTI$Dernier), lag = 1) * 100)
baseWTI <- baseWTI[- length(baseWTI$Dernier), ]
#On ajoute au DataFrame
baseWTI$rtWTI <- rtWTI
# On graphe les rentabilités
ggplot(data = baseWTI, aes(x = Date, y = rtWTI)) +
geom_line(color = "#00AFBB", size = 0.1)+
theme_minimal()
# Stats descriptives des rentabilités
statWTI=data.frame(basicStats(rtWTI*100))
kurtosis(rtWTI)
statWTI
# Autocorrelation Returns
autocorrTest = Box.test(baseWTI$rtWTI, lag = 10, type = "Ljung-Box", fitdf = 0)
show(autocorrTest)
